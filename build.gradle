/**
 * Gradle plugins
 */
plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
}

/**
 * Project Variables
 */
group = 'com.avrix'
version = '1.1.1'

/**
 * Path to the compiled Jar file
 */
def buildPath = System.getenv('BUILD_PATH') ?: 'build';

/**
 * Repositories for project dependencies
 */
repositories {
    mavenCentral()
}

/**
 * Project Dependencies
 */
dependencies {
    /**
     * Project Zomboid
     * Dependencies are created via the Gradle task 'createZombieJar'
     */
    compileOnly files('/libs/ProjectZomboid-core-41.78.16.jar')
    compileOnly files('/libs/ProjectZomboid-libs-41.78.16.jar')

    /**
     * Utils
     */
    implementation('org.yaml:snakeyaml:2.2')
    implementation('org.javassist:javassist:3.30.2-GA')

    /**
     * Test
     */
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation('org.junit.jupiter:junit-jupiter')
}

/**
 * Project testing
 */
test {
    jvmArgs '-Djdk.attach.allowAttachSelf=true'
    useJUnitPlatform()
}

/**
 * Replacing data with current ones
 */
processResources {
    filesMatching('**/avrix.properties') {
        filter {
            it.replace('%PROJECT_VERSION%', version)
                    .replace('%PROJECT_NAME%', rootProject.name + " Loader")
        }
    }
}

/**
 * Creating a Jar file wrapper (core) to run a game server
 */
shadowJar {
    archiveFileName.set("${rootProject.name}-Core-${version}.jar")
    destinationDirectory.set(file(buildPath))

    manifest {
        attributes(
                'Implementation-Title': rootProject.name,
                'Implementation-Version': version,
                'Agent-Class': 'com.avrix.agent.Agent',
                'Can-Redefine-Classes': 'true',
                'Can-Retransform-Classes': 'true'
        )
    }
}

/**
 * Building a Jar archive with documentation
 */
tasks.register('buildJar') {
    dependsOn generateJavaDoc
    finalizedBy shadowJar
}

/**
 * Generating Jar Files of Project Zomboid File Dependencies
 * Required environment variables:
 * 1) ZOMBIE_FOLDER_PATH (For example: C:\Steam\steamapps\common\Project Zomboid Dedicated Server\java\zombie)
 * 2) GAME_FOLDER_PATH (For example: C:\Steam\steamapps\common\Project Zomboid Dedicated Server\java)
 */
tasks.register('buildZomboidDependencies') {
    dependsOn createZombieLibsJar, createZombieJar
}

/**
 * Generating JavaDoc for Jar archive
 */
tasks.register('generateJavaDoc', Javadoc) {
    source = sourceSets.main.java.srcDirs
    classpath = configurations.compileClasspath
    destinationDir = file("docs/javadoc")
}

/**
 * Task for creating a JAR file named 'ProjectZomboid-core-41.78.16.jar' from the contents of a specified folder.
 * For example ZOMBIE_FOLDER_PATH: C:\Steam\steamapps\common\Project Zomboid Dedicated Server\java\zombie
 */
tasks.register('createZombieJar') {
    doLast {
        def zombieFolderPath = System.getenv("ZOMBIE_FOLDER_PATH")
        def archiveName = 'ProjectZomboid-core-41.78.16.jar'

        if (zombieFolderPath != null && !zombieFolderPath.isEmpty()) {
            def tempDir = file('tempDir')
            def tempDirZombie = file('tempDir/zombie')
            tempDir.mkdirs()

            copy {
                from zombieFolderPath
                into tempDirZombie
            }

            exec {
                commandLine 'jar', 'cvf', archiveName, '-C', tempDir, '.'
            }

            def libsFolder = file('libs')
            libsFolder.mkdirs()
            def targetFile = file("${libsFolder}/${archiveName}")
            if (targetFile.exists()) {
                targetFile.delete()
            }
            file(archiveName).renameTo(targetFile)

            delete tempDir
        } else {
            println "The ZOMBIE_FOLDER_PATH environment variable is not set or is empty."
        }
    }
}

/**
 * Task for creating a JAR file named 'ProjectZomboid-libs-41.78.16.jar' from the contents of a specified folder.
 * For example GAME_FOLDER_PATH: C:\Steam\steamapps\common\Project Zomboid Dedicated Server\java
 */
tasks.register('createZombieLibsJar') {
    doLast {
        def gameFolderPath = System.getenv('GAME_FOLDER_PATH')
        def archiveName = 'ProjectZomboid-libs-41.78.16.jar'

        if (gameFolderPath != null && !gameFolderPath.isEmpty()) {
            def tempDir = file('temps')
            tempDir.mkdirs()

            def jarFiles = file(gameFolderPath).listFiles().findAll { it.isFile() && it.name.endsWith('.jar') && !it.name.contains(rootProject.name) }

            def excludedFolders = ['zombie', 'jre', 'jre64', 'launcher', 'media',
                                   'license', 'mods', 'win32', 'win64', 'workshop']
            def includedFolders = file(gameFolderPath).listFiles().findAll { it.isDirectory() && !excludedFolders.contains(it.name.toLowerCase()) }

            includedFolders.each { dir ->
                copy {
                    from dir
                    into file("${tempDir}/${dir.name}")
                }
            }

            jarFiles.each { jarFile ->
                copy {
                    from jarFile
                    into tempDir
                }
            }

            def tempJarFiles = tempDir.listFiles().findAll { it.isFile() && it.name.endsWith('.jar') }

            tempJarFiles.each { jarFile ->
                exec {
                    workingDir tempDir
                    commandLine 'jar', 'xf', jarFile.absolutePath
                }
                jarFile.delete()
            }

            exec {
                commandLine 'jar', 'cvf', archiveName, '-C', tempDir, '.'
            }

            def libsFolder = file('libs')
            libsFolder.mkdirs()
            def targetFile = file("${libsFolder}/${archiveName}")
            if (targetFile.exists()) {
                targetFile.delete()
            }
            file(archiveName).renameTo(file("${libsFolder}/${archiveName}"))

            delete tempDir
        } else {
            println('The GAME_FOLDER_PATH environment variable is not set or is empty.')
        }
    }
}